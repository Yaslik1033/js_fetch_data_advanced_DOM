{"version":3,"sources":["scripts/main.js"],"names":["baseUrl","request","url","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","status","statusText","getFirstReceivedDetails","phones","race","map","phone","resolve","id","getAllSuccessfulDetails","allSettled","filter","value","addNotification","details","headerText","notificationClass","notification","document","createElement","header","list","detailsLength","length","textContent","classList","add","i","detail","insertAdjacentHTML","name","append","body","res"],"mappings":";AAAA,aAEA,IAAMA,EAAU,6DAEhB,SAASC,IAAQC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACdC,OAAAA,MAASH,GAAAA,OAAAA,EAAgBE,UAAAA,OAAAA,EAAzB,UACJE,KAAK,SAAAC,GACA,OAACA,EAASC,GAMTD,EAASE,QAAQC,IAAI,gBAAgBC,SAAS,oBAM5CJ,EAASK,OALPC,QAAQC,OACb,IAAIC,MAAM,kCAPLF,QAAQC,OACb,IAAIC,MAASR,GAAAA,OAAAA,EAASS,OAAYT,OAAAA,OAAAA,EAASU,gBAcrD,SAASC,IACAf,OAAAA,IACJG,KAAK,SAAAa,GAAUN,OAAAA,QAAQO,KAAKD,EAC1BE,IAAI,SAAAC,GAAS,OAAA,IAAIT,QAAQ,SAAAU,GACxBA,OAAAA,EAAQpB,EAAYmB,IAAAA,OAAAA,EAAME,aAIlC,SAASC,IACAtB,OAAAA,IACJG,KAAK,SAAAa,GAAUN,OAAAA,QAAQa,WAAWP,EAChCE,IAAI,SAAAC,GAAS,OAAA,IAAIT,QAAQ,SAAAU,GAAWA,OAAAA,EAAQpB,EAAYmB,IAAAA,OAAAA,EAAME,aAEhElB,KAAK,SAAAa,GAAUA,OAAAA,EAAOQ,OAAO,SAAAL,GAASA,MAAiB,cAAjBA,EAAMN,WAC5CV,KAAK,SAAAa,GAAUA,OAAAA,EAAOE,IAAI,SAAAC,GAASA,OAAAA,EAAMM,UAS9C,SAASC,EAAgBC,EAASC,EAAYC,GACtCC,IAAAA,EAAeC,SAASC,cAAc,OACtCC,EAASF,SAASC,cAAc,MAChCE,EAAOH,SAASC,cAAc,MAC9BG,EAAgBR,EAAQS,QAAU,EAExCH,EAAOI,YAAcT,EACrBK,EAAOK,UAAUC,IAAI,aAEhB,IAAA,IAAIC,EAAI,EAAGA,EAAIL,EAAeK,IAAK,CAChCC,IAAAA,EAASd,EAAQa,IAAMb,EAE7BO,EAAKQ,mBAAmB,YACVD,qBAAAA,OAAAA,EAAOE,KAAaF,UAAAA,OAAAA,EAAOpB,GADzC,gBAKFS,EAAaQ,UAAUC,IAAIV,GAE3BC,EAAac,OAAOX,GACpBH,EAAac,OAAOV,GACpBH,SAASc,KAAKD,OAAOd,GA3BvBf,IACGZ,KAAK,SAAA2C,GAAOpB,OAAAA,EAAgBoB,EAAK,iBAAkB,oBAEtDxB,IACGnB,KAAK,SAAA2C,GAAOpB,OAAAA,EAAgBoB,EAAK,iBAAkB","file":"main.7759dc14.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst baseUrl = 'https://mate-academy.github.io/phone-catalogue-static/api/';\n\nfunction request(url = '') {\n  return fetch(`${baseUrl}phones${url}.json`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`)\n        );\n      }\n\n      if (!response.headers.get('content-type').includes('application/json')) {\n        return Promise.reject(\n          new Error('Content type is not supported')\n        );\n      }\n\n      return response.json();\n    });\n}\n\nfunction getFirstReceivedDetails() {\n  return request()\n    .then(phones => Promise.race(phones\n      .map(phone => new Promise(resolve =>\n        resolve(request(`/${phone.id}`))\n      ))));\n};\n\nfunction getAllSuccessfulDetails() {\n  return request()\n    .then(phones => Promise.allSettled(phones\n      .map(phone => new Promise(resolve => resolve(request(`/${phone.id}`)))\n      )))\n    .then(phones => phones.filter(phone => phone.status === 'fulfilled'))\n    .then(phones => phones.map(phone => phone.value));\n}\n\ngetFirstReceivedDetails()\n  .then(res => addNotification(res, 'First Received', 'first-received'));\n\ngetAllSuccessfulDetails()\n  .then(res => addNotification(res, 'All Successful', 'all-successful'));\n\nfunction addNotification(details, headerText, notificationClass) {\n  const notification = document.createElement('div');\n  const header = document.createElement('h3');\n  const list = document.createElement('ul');\n  const detailsLength = details.length || 1;\n\n  header.textContent = headerText;\n  header.classList.add('li-header');\n\n  for (let i = 0; i < detailsLength; i++) {\n    const detail = details[i] || details;\n\n    list.insertAdjacentHTML('beforeend', `\n      <li>Name: ${detail.name}, ID: ${detail.id}</li>\n    `);\n  }\n\n  notification.classList.add(notificationClass);\n\n  notification.append(header);\n  notification.append(list);\n  document.body.append(notification);\n}\n"]}